import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:cc_workout_app/shared/models/lift_type.dart';
import 'package:cc_workout_app/shared/models/lift_entry.dart';
import 'package:cc_workout_app/core/constants/validation.dart';

class AddLiftFormState {
  final LiftType? liftType;
  final int? reps;
  final double? weightKg;
  final DateTime? performedAt;
  final String? liftTypeError;
  final String? repsError;
  final String? weightError;
  final String? dateError;

  const AddLiftFormState({
    this.liftType,
    this.reps,
    this.weightKg,
    this.performedAt,
    this.liftTypeError,
    this.repsError,
    this.weightError,
    this.dateError,
  });

  AddLiftFormState copyWith({
    LiftType? liftType,
    int? reps,
    double? weightKg,
    DateTime? performedAt,
    Object? liftTypeError = _undefined,
    Object? repsError = _undefined,
    Object? weightError = _undefined,
    Object? dateError = _undefined,
  }) {
    return AddLiftFormState(
      liftType: liftType ?? this.liftType,
      reps: reps ?? this.reps,
      weightKg: weightKg ?? this.weightKg,
      performedAt: performedAt ?? this.performedAt,
      liftTypeError: liftTypeError == _undefined
          ? this.liftTypeError
          : liftTypeError as String?,
      repsError: repsError == _undefined
          ? this.repsError
          : repsError as String?,
      weightError: weightError == _undefined
          ? this.weightError
          : weightError as String?,
      dateError: dateError == _undefined
          ? this.dateError
          : dateError as String?,
    );
  }

  bool get isValid {
    return liftType != null &&
        reps != null &&
        weightKg != null &&
        performedAt != null &&
        liftTypeError == null &&
        repsError == null &&
        weightError == null &&
        dateError == null;
  }

  LiftEntry? toLiftEntry(String userId) {
    if (!isValid) return null;

    return LiftEntry(
      id: '', // Will be generated by database
      userId: userId,
      lift: liftType!,
      reps: reps!,
      weightKg: weightKg!,
      performedAt: performedAt!,
      createdAt: DateTime.now(),
    );
  }
}

const _undefined = Object();

class AddLiftFormNotifier extends AutoDisposeNotifier<AddLiftFormState> {
  @override
  AddLiftFormState build() {
    return AddLiftFormState(performedAt: DateTime.now());
  }

  void setLiftType(LiftType? liftType) {
    state = state.copyWith(
      liftType: liftType,
      liftTypeError: liftType == null ? 'Lift type is required' : null,
    );
  }

  void setReps(String repsText) {
    if (repsText.isEmpty) {
      state = state.copyWith(reps: null, repsError: 'Reps is required');
      return;
    }

    final reps = int.tryParse(repsText);
    if (reps == null) {
      state = state.copyWith(
        reps: null,
        repsError: 'Please enter a valid number',
      );
      return;
    }

    String? error;
    if (reps < ValidationConstants.minReps ||
        reps > ValidationConstants.maxReps) {
      error = ValidationConstants.repsRangeError;
    }

    state = state.copyWith(reps: reps, repsError: error);
  }

  void setWeight(String weightText) {
    if (weightText.isEmpty) {
      state = state.copyWith(weightKg: null, weightError: 'Weight is required');
      return;
    }

    final weight = double.tryParse(weightText);
    if (weight == null) {
      state = state.copyWith(
        weightKg: null,
        weightError: 'Please enter a valid weight',
      );
      return;
    }

    String? error;
    if (weight <= ValidationConstants.minWeight) {
      error = ValidationConstants.weightRangeError;
    } else if (weight > ValidationConstants.maxWeight) {
      error = ValidationConstants.weightMaxError;
    }

    state = state.copyWith(weightKg: weight, weightError: error);
  }

  void setPerformedAt(DateTime? date) {
    if (date == null) {
      state = state.copyWith(
        performedAt: null,
        dateError: ValidationConstants.dateRequiredError,
      );
      return;
    }

    String? error;
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final performedDate = DateTime(date.year, date.month, date.day);

    if (performedDate.isAfter(today)) {
      error = 'Date cannot be in the future';
    }

    state = state.copyWith(performedAt: date, dateError: error);
  }

  void clearForm() {
    state = AddLiftFormState(performedAt: DateTime.now());
  }

  void validateAll() {
    if (state.liftType == null) {
      state = state.copyWith(liftTypeError: 'Lift type is required');
    }
    if (state.reps == null) {
      state = state.copyWith(repsError: 'Reps is required');
    }
    if (state.weightKg == null) {
      state = state.copyWith(weightError: 'Weight is required');
    }
    if (state.performedAt == null) {
      state = state.copyWith(dateError: ValidationConstants.dateRequiredError);
    }
  }
}

final addLiftFormProvider =
    AutoDisposeNotifierProvider<AddLiftFormNotifier, AddLiftFormState>(() {
      return AddLiftFormNotifier();
    });

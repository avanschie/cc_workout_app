import 'package:cc_workout_app/shared/models/lift_type.dart';
import 'package:cc_workout_app/shared/models/lift_entry.dart';

/// Unified form state for both adding and editing lift entries
class LiftFormState {
  final LiftType? liftType;
  final int? reps;
  final double? weightKg;
  final DateTime? performedAt;
  final String? liftTypeError;
  final String? repsError;
  final String? weightError;
  final String? dateError;
  final bool showDeleteConfirmation;

  const LiftFormState({
    this.liftType,
    this.reps,
    this.weightKg,
    this.performedAt,
    this.liftTypeError,
    this.repsError,
    this.weightError,
    this.dateError,
    this.showDeleteConfirmation = false,
  });

  LiftFormState copyWith({
    LiftType? liftType,
    int? reps,
    double? weightKg,
    DateTime? performedAt,
    Object? liftTypeError = _undefined,
    Object? repsError = _undefined,
    Object? weightError = _undefined,
    Object? dateError = _undefined,
    bool? showDeleteConfirmation,
  }) {
    return LiftFormState(
      liftType: liftType ?? this.liftType,
      reps: reps ?? this.reps,
      weightKg: weightKg ?? this.weightKg,
      performedAt: performedAt ?? this.performedAt,
      liftTypeError: liftTypeError == _undefined
          ? this.liftTypeError
          : liftTypeError as String?,
      repsError: repsError == _undefined
          ? this.repsError
          : repsError as String?,
      weightError: weightError == _undefined
          ? this.weightError
          : weightError as String?,
      dateError: dateError == _undefined
          ? this.dateError
          : dateError as String?,
      showDeleteConfirmation:
          showDeleteConfirmation ?? this.showDeleteConfirmation,
    );
  }

  bool get isValid {
    return liftType != null &&
        reps != null &&
        weightKg != null &&
        performedAt != null &&
        liftTypeError == null &&
        repsError == null &&
        weightError == null &&
        dateError == null;
  }

  /// Create a new lift entry (for adding)
  LiftEntry? toNewLiftEntry(String userId) {
    if (!isValid) return null;

    return LiftEntry(
      id: '', // Will be generated by database
      userId: userId,
      lift: liftType!,
      reps: reps!,
      weightKg: weightKg!,
      performedAt: performedAt!,
      createdAt: DateTime.now(),
    );
  }

  /// Create an updated lift entry (for editing)
  LiftEntry? toUpdatedLiftEntry(String entryId, String userId) {
    if (!isValid) return null;

    return LiftEntry(
      id: entryId,
      userId: userId,
      lift: liftType!,
      reps: reps!,
      weightKg: weightKg!,
      performedAt: performedAt!,
      createdAt: DateTime.now(),
    );
  }

  /// Factory constructor for creating form state from existing lift entry
  factory LiftFormState.fromLiftEntry(LiftEntry entry) {
    return LiftFormState(
      liftType: entry.lift,
      reps: entry.reps,
      weightKg: entry.weightKg,
      performedAt: entry.performedAt,
    );
  }

  /// Factory constructor for adding new lift with default date
  factory LiftFormState.forAdding() {
    return LiftFormState(performedAt: DateTime.now());
  }

  /// Factory constructor for empty state (editing)
  const LiftFormState.empty()
    : liftType = null,
      reps = null,
      weightKg = null,
      performedAt = null,
      liftTypeError = null,
      repsError = null,
      weightError = null,
      dateError = null,
      showDeleteConfirmation = false;
}

const _undefined = Object();
